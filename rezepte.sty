% %%%%%%%%%%%%%%%%%%%%%%%%
% PACKAGE recipes
% 
% This is a simple package to notate recipes
% and calculate different amounts of ingredients
% in accordance to the number of portions.
%
% by Gesina Schwalbe
% 
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
% !!! Dynamic properties are by the time !!!
% !!! only available in                  !!!
% !!!  - Browsers (tested with Chromium) !!!
% !!!  - Acrobat Reader                  !!!
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
%
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
% !! Be aware that you need        !!
% !! the package insdljs           !!
% !! out of the acrotex collection !!
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
% 
% This package provides commands 
% to start a recipe block,
% specify steps to do and 
% annotate the needed ingredients, namely:
% - environment recipe
% - environment step (to be used within recipe env)
% - command \ingredient (to be used within step env)
% - command \Ingredient (to be used within step env)
% 
% Comments are better only inserted between steps,
% not between ingredients (though possible).
% 
% To change block lengths locally, please use
% \renewlength{<lengthname>}{<dimension>}
% Available legth names are:
% - amountwidth
% - unitwidth
% - descriptionwidth
% - ingredienttextskip
% You can reset to default with \resetlengths.
%
%
% written with LaTeX2e
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{recipes}[2015/04/02 This is an assistant for recipes]

% Warning concerning chosen class
\ifx\KOMAscript\relax \PackageWarning{rezepte}{There is no guarantee,
  that rezepte works within non KOMA classes!}\fi

\RequirePackage{xparse}
\RequirePackage{tabularx}
\RequirePackage{booktabs}
\RequirePackage[colorlinks=true]{hyperref}
\RequirePackage[pdftex]{insdljs}  % inline javascript with \begin{insDLJS}
\RequirePackage{ifthen}
\RequirePackage{calc}
\RequirePackage{xparse}

% javascript definitions
\begin{insDLJS}{jsfile}{Outsourced Javascript}
  % indicator whether default values are assigned
  % (see assign_default_values())
  var assigned=false;
  
  
  % valuation handler:
  % recalculate ingredient amounts when portions have changed
  function calculate_values(id,default_portions){
    if(!assigned){
      assign_default_values();
      assigned=true;
    }

    var cnt=1;

    % new portions value (with . instead of , )
    var portions=parseFloat(event.value.replace(",","."),10);
    % check on parsing errors
    if(!portions){
      % special case: DEL character within text field (mainly chromium)
      % --> get input (event.value), 
      % replace , with .
      % replace/remove DELs (ascii-char 127), 
      portions = parseFloat(
      event.value
      .replace(",",".")
      .replace(RegExp(String.fromCharCode(127),'g'),""),10);
      
      % now try again:
      if(!portions){
        app.alert("Please enter only numbers!! You entered:  "+event.value);
        return;
      };
    };
    
    % change values of ingredient fields
    var tmp_obj=this.getField(id+"ing"+cnt);
    while(tmp_obj)
    {
      tmp_obj.value=ingredient_defaults[id-1][cnt-1]*portions/default_portions;
      cnt++;
      tmp_obj=this.getField(id+"ing"+cnt);
    };
  };


  % default values for ingredient amounts
  % format: 
  % ingredient_defaults[<recipe number>-1][<ingredient number>-1]
  var ingredient_defaults=[];

  % assign the default values to the ingredients
  % expample: 
  % input is 200 [g] flour for 4 [Portions]
  % in the 3rd recipe where flour is the 4th ingredient
  % --> ingredients[3][4]=200
  function assign_default_values(){
    var recipe_cnt=1;
    var ingredient_cnt=1;
    var tmp_portion=this.getField(recipe_cnt);
    var tmp_ingredient=this.getField(recipe_cnt+"ing"+ingredient_cnt);
    
    % go through existing portion fields (one per recipe),
    % that carry the recipe id
    while(tmp_portion)
    {
      ingredient_defaults[recipe_cnt-1]=[];
      % go through the existing ingredients in the current recipe
      % with id recipe_cnt
      while(tmp_ingredient)
      {
        % entry
        ingredient_defaults[recipe_cnt-1][ingredient_cnt-1] = tmp_ingredient.value;
        % next
        ingredient_cnt++;
        tmp_ingredient=this.getField(recipe_cnt+"ing"+ingredient_cnt);
      };
      % next
      recipe_cnt++;
      ingredient_cnt=1;
      tmp_portion=this.getField(recipe_cnt);
      tmp_ingredient=this.getField(recipe_cnt+"ing"+ingredient_cnt);
    };
  };

\end{insDLJS}


\AtBeginDocument{\begin{Form}}
  \AtEndDocument{\end{Form}}

% counter
\newcounter{recipes}
\setcounter{recipes}{0}
% only calculatable ingredients
\newcounter{@ingredients}[recipes]
\setcounter{@ingredients}{0}
% total amount of ingredients
\newcounter{Ingredients}[recipes]
\setcounter{Ingredients}{0}
% total amount of steps
\newcounter{step}
\setcounter{step}{0}

% lengths
\newlength{\@amountwidth}
\setlength{\@amountwidth}{1cm}
\newlength{\@unitwidth}
\setlength{\@unitwidth}{1cm}
\newlength{\@descriptionwidth}
\setlength{\@descriptionwidth}{2.5cm}

% workaround for ugly TextField frames
\newlength{\@textfieldframewidth}
\setlength{\@textfieldframewidth}{1bp}
\newlength{\@ingredienttextskip}
\setlength{\@ingredienttextskip}{{\@textfieldframewidth+3mm}}
\newlength{\ingredientdescriptionskip}
\setlength{\ingredientdescriptionskip}{1ex}

\newlength{\@ingredientswidth}
\setlength{\@ingredientswidth}{%
  {\@amountwidth + \@unitwidth + \@descriptionwidth + \@ingredienttextskip}%
}

\newcommand{\resetlengths}{%
  \setlength{\@amountwidth}{6ex}%
  \setlength{\@unitwidth}{1cm}%
  \setlength{\@descriptionwidth}{2.5cm}%
  \setlength{\@textfieldframewidth}{1bp}%
  \setlength{\@ingredienttextskip}{{\@textfieldframewidth+3mm}}%
  \setlength{\ingredientdescriptionskip}{1ex}%
  \setlength{\@ingredientswidth}{%
    {\@amountwidth + \@unitwidth + \@descriptionwidth + \@ingredienttextskip}%
  }%
}
\resetlengths

% #1: length name
% #2: dimension
% Available length names:
% - amountwidth
% - unitwidth
% - descriptionwidth
% - ingredienttextskip
\newcommand{\renewlength}[2]{%
\expandafter\ifx\csname @#1\endcsname\relax%
\PackageError{recipes}%
{Unknown length name!}%
{%
  #1 is no known length. Probably you missspelled it.
  The following length names are available:\MessageBreak
  amountwidth\MessageBreak
  unitwidth\MessageBreak
  descriptionwidth\MessageBreak
  ingredienttextskip
}%
  \else%
  \setlength{\csname @#1\endcsname}{#2}%
  \setlength{\@ingredientswidth}{%
  {\@amountwidth + \@unitwidth + \@descriptionwidth + \@ingredienttextskip}%
}%
  \fi%
}


%   #1: name
%   #2: number of portions
%  (#3: what portions, e.g. pieces)
%   #4: working time
\NewDocumentCommand\@beginrecipe{mmO{Portionen}m}{%
  \stepcounter{recipes}
  \par\noindent
  #1
  \hfill
  % portion entry with unique identifier=recipe id
  \TextField%
  [name={\therecipes},%
  default=#2,%
  align=2,bordercolor={0 0 0}, maxlen=5, width=5em,%
  charsize=\f@size pt,%
  validate={calculate_values(\therecipes,#2);}
  ]{}
  #3%
  \\\rule[0.5\baselineskip]{\textwidth}{1.5pt}\\[-.5\baselineskip]
  \parbox{\textwidth}{\raggedleft Arbeitszeit: #4}%
  \par
}


% actual environment (same arguments as above)
\NewDocumentEnvironment{recipe}{mmO{Portionen}m}{%
  \@beginrecipe{#1}{#2}[#3]{#4}%
}{%
    \par%\endrecipe%
}


% temporal storage of step description
\newcommand{\curstepdescription}{}

% #1: step description
\newenvironment{step}[1]{%
  \stepcounter{step}
  % reset the ingredients
  \let\@firstingredientset\relax
  % set marker that within step env
  \def\@instep{You are inside a step environment.}
  % set description of step
  \renewcommand{\curstepdescription}{%
    \parbox[t]{{\textwidth-\@ingredientswidth-\ingredientdescriptionskip}}{#1}%
  }
  \par
  \noindent
  \minipage[t]{\linewidth}
  \minipage[t]{\@ingredientswidth}
}{
  \endminipage\hfill\curstepdescription
  \endminipage
  \let\@instep\relax
  \\\par
}


% #1: amount
% [#2: unit]
% #3: description
\NewDocumentCommand\ingredient{mO{\parbox[t]{\@unitwidth}{ }}m}{%
  \stepcounter{@ingredients}
  \stepcounter{Ingredients}
  % newline if not first in step
  \expandafter\ifx\csname @firstingredientset\endcsname\relax%
  \def\@firstingredientset{%
    There is one or more ingredient in this step.%
  }%
  \else\\
  \fi
  % 
  % check, whether in step
  \expandafter\ifx\csname @instep\endcsname\relax%
  \PackageError{recipes}%
  {\protect\ingredient\space used outside step environment!}%
  {%
    You can only insert an \protect\ingredient within a step environment.
    Maybe you forgot a \protect\begin{step}%
  }
  \else%
  \fi
  % ingredient amount with unique identifier/id
  \raisebox{-2\@textfieldframewidth}%
  [{1eM + \@textfieldframewidth}][\@textfieldframewidth]{%
    \parbox[t]{{\@amountwidth + \@textfieldframewidth}}{%
      \TextField[%
      value=#1,%
      name={\therecipes ing\the@ingredients},%
      readonly=true,%
      borderwidth=0pt,bordercolor={1 1 1},%
      maxlen=5, width=\@amountwidth, align=2, %
      charsize=\f@size pt%
      ]{}%
    }}%
  \parbox[t]{\@unitwidth}{#2}%
  \parbox[t]{\@descriptionwidth}{\raggedright#3}
}


% #1: description
\newcommand{\Ingredient}[1]{%
  \stepcounter{Ingredients}
  % newline if not first in step
  \expandafter\ifx\csname @firstingredientset\endcsname\relax%
  \def\@firstingredientset{%
    There is one or more ingredient in this step.%
  }%
  \else\\
  \fi
  % 
  % check, whether in step
  \expandafter\ifx\csname @instep\endcsname\relax%
  \PackageError{recipes}%
  {\protect\Ingredient\space used outside step environment!}%
  {%
    You can only insert an \protect\Ingredient within a step environment.
    Maybe you forgot a \protect\begin{step}%
    }
    \else%
    \fi
    % Ingredient description with spacing
    \raisebox{-2\@textfieldframewidth}%
    [{1eM + \@textfieldframewidth}][\@textfieldframewidth]%
    {\parbox[t]{{\@amountwidth + \@textfieldframewidth}}{~}}%
    \parbox[t]{\@unitwidth}{~}%
    \parbox[t]{\@descriptionwidth}{\raggedright#1}
  }
